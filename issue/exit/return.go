package main

import "fmt"

/*
golang 支持命名返回值，它与使用普通(匿名)返回值不同的是，命名返回值会被视为定义在函数顶部的变量，
并且在使用 return 语句返回时，不再必须在其后面指定参数名，也就是支持“裸”返回。

而使用普通返回值时，return 语句返回需要在其后面指定与普通返回值相同类型的参数名。
实际上，命名返回值和普通返回值都有其适用的场景。

下面了解一下 Golang 语言函数或方法使用命名返回值和普通返回值各自的“好处”与“坏处”。
*/

/*
1.命名返回值
使用命名返回值的“好处”是可以提升代码可读性。

当函数或方法有多个返回值时，尤其是函数体中代码比较长的函数或方法，如果使用普通返回值，那么我们想要知道返回值的含义，就需要先阅读函数体中完整代码。
而如果使用具有实际含义的命名返回值，只需要阅读函数或方法的签名，就可以知道其含义，甚至可以把它们作为文档使用。

但是，命名返回值也不是没有“坏处”，如果函数体内有变量与命名返回值同名，那么命名返回值会被覆盖，所以也需要注意避免“踩坑”。
*/

/*
2.普通返回值
普通(匿名)返回值的“好处”是简洁，当我们写一些简短函数或方法时，使用普通返回值可以使代码更加简洁，
在 Golang 语言官方标准库中，有很多使用普通返回值的函数或方法。

但是如果返回值是指针类型时，使用普通返回值，就会使我们函数体中的代码变得不优雅，比如以下这段示例代码。
*/
func c() *int {
	i := 0
	return &i
}

func d() (i *int) {
	return
}

/*
3.踩坑
defer 在命名返回值和普通返回值的函数或方法中，返回的结果不一样。
*/
func a() int {
	i := 0
	defer func() {
		i += 1
		fmt.Println("a defer:", i)
	}()
	return i
}

func b() (i int) {
	i = 0
	defer func() {
		i += 1
		fmt.Println("b defer:", i)
	}()
	return i
}

func main() {
	f := fmt.Println
	f(a())
	f(b())
}

/*
4.总结
在非简短函数或方法的代码中，建议优先使用命名返回值。它不仅可以提升代码的可读性，也可以帮我们避免一些"踩坑"
*/
