package main

/*
	工厂方法模式：
		是一种实现了“工厂”概念的面向对象设计模式。
		就像其他创建型模式一样，它也是处理在不指定对象具体类型的情况下创建对象的问题。
		工厂方法模式的实质是“定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。”
		实际应用中工厂方法模式针对的是一个产品等级结构。

	工厂方法需要：
		工厂接口、工厂结构体、产品接口、产品结构体

	优点：
		符合“开闭”原则，具有很强的的扩展性、弹性和可维护性。
		修改时只需要添加对应的工厂类即可使用了依赖倒置原则，依赖抽象而不是具体，使用（客户）和实现（具体类）松耦合。
		客户只需要知道所需产品的具体工厂，而无须知道具体工厂的创建产品的过程，甚至不需要知道具体产品的类名。

	缺点:
		每增加一个产品时，都需要一个具体类和一个具体创建者，使得类的个数成倍增加，导致系统类数目过多，复杂性增加.
		对简单工厂，增加功能修改的是工厂类；对工厂方法，增加功能修改的是产品类。
*/

// 创建一个蛋糕店工厂接口，和蛋糕类的接口。该工厂用来生产不同口味的蛋糕，如韭菜的猪肉馅的。
//type DumplingsShopinterface interface{
//	Generate(t string) *Dumplings
//}
//
//type Dumplingsinterface interface {
//	create()
//}
